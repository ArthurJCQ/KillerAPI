AI-Powered Game Creation - Clean Architecture Flow
===================================================

┌────────────────────────────────────────────────────────────────────┐
│                         CLIENT REQUEST                              │
│                  POST /api/game/create-ai                          │
│                 { roomName, missionsCount, theme }                 │
└────────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼
┌────────────────────────────────────────────────────────────────────┐
│                       API CONTROLLER                                │
│  Handles HTTP Request/Response                                     │
│  Validates input, manages authentication                           │
└────────────────────────────────────────────────────────────────────┘
                                  │
                                  │ injects & calls
                                  ▼
┌────────────────────────────────────────────────────────────────────┐
│                     APPLICATION LAYER                               │
│  ┌──────────────────────────────────────────────────────────────┐ │
│  │ CreateGameMasteredRoomWithAiMissionsUseCase                  │ │
│  │                                                               │ │
│  │  execute(roomName, gameMaster, missionsCount, theme)        │ │
│  │    ├─> Step 1: Create Room (business logic)                 │ │
│  │    ├─> Step 2: Generate Missions (delegates to interface)   │ │
│  │    ├─> Step 3: Create Mission Entities (business logic)     │ │
│  │    └─> Step 4: Persist to DB (delegates to EntityManager)   │ │
│  └──────────────────────────────────────────────────────────────┘ │
└────────────────────────────────────────────────────────────────────┘
                      │                             │
                      │ depends on                  │ depends on
                      │ (interface)                 │ (interface)
                      ▼                             ▼
┌───────────────────────────────────────┐  ┌──────────────────────┐
│         DOMAIN LAYER                  │  │  DOCTRINE ORM        │
│  ┌─────────────────────────────────┐ │  │  EntityManager       │
│  │  MissionGeneratorInterface      │ │  └──────────────────────┘
│  │                                  │ │
│  │  generateMissions(count, theme) │ │
│  │    Returns: array<string>       │ │
│  └─────────────────────────────────┘ │
│                                        │
│  Business Entities:                   │
│    - Room                             │
│    - Mission                          │
│    - Player                           │
└───────────────────────────────────────┘
                      ▲
                      │ implements
                      │
┌────────────────────────────────────────────────────────────────────┐
│                    INFRASTRUCTURE LAYER                             │
│  ┌──────────────────────────────────────────────────────────────┐ │
│  │  OpenRouterMissionGenerator                                  │ │
│  │                                                               │ │
│  │  implements MissionGeneratorInterface                        │ │
│  │                                                               │ │
│  │  generateMissions(count, theme):                            │ │
│  │    1. Build AI prompt                                        │ │
│  │    2. Call OpenRouter API (Claude 3.5 Sonnet)              │ │
│  │    3. Parse AI response                                      │ │
│  │    4. Return mission strings                                 │ │
│  └──────────────────────────────────────────────────────────────┘ │
└────────────────────────────────────────────────────────────────────┘
                                  │
                                  │ HTTP Request
                                  ▼
┌────────────────────────────────────────────────────────────────────┐
│                   EXTERNAL SERVICE                                  │
│                   OpenRouter API                                    │
│              https://openrouter.ai/api/v1                          │
│                (Claude 3.5 Sonnet Model)                           │
└────────────────────────────────────────────────────────────────────┘


FILE STRUCTURE
==============

Domain Layer (Business Rules & Interfaces)
└── src/Domain/Mission/
    └── MissionGeneratorInterface.php

Application Layer (Use Cases & Orchestration)
└── src/Application/UseCase/Room/
    └── CreateGameMasteredRoomWithAiMissionsUseCase.php

Infrastructure Layer (External Services Implementation)
└── src/Infrastructure/Ai/
    └── OpenRouterMissionGenerator.php

Configuration
└── config/
    └── services.yaml (wire interface to implementation)

Tests
└── tests/Unit/Infrastructure/Ai/
    └── OpenRouterMissionGeneratorTest.php

Documentation
├── README.AI-GAME-CREATION.md
└── docs/
    ├── ai-game-creation-example.md
    └── ai-architecture-diagram.txt


DEPENDENCY FLOW (Clean Architecture)
====================================

                    ┌──────────────┐
                    │   External   │ (User/API)
                    │  Interface   │
                    └──────┬───────┘
                           │
                           ▼
                    ┌──────────────┐
                    │ Application  │ (Use Cases)
                    │    Layer     │
                    └──┬───────┬───┘
                       │       │
         ┌─────────────┘       └─────────────┐
         ▼                                    ▼
  ┌──────────────┐                    ┌──────────────┐
  │   Domain     │                    │Infrastructure│
  │    Layer     │◄───implements──────┤    Layer     │
  └──────────────┘                    └──────────────┘
   (Interfaces &                       (Implementations)
    Entities)

Key Principles:
- Application depends on Domain (interfaces)
- Infrastructure depends on Domain (implements interfaces)
- Domain depends on NOTHING (pure business logic)
- Application orchestrates without knowing implementation details


BENEFITS
========

✓ Testability       - Easy to mock MissionGeneratorInterface
✓ Flexibility       - Swap AI providers without changing business logic
✓ Maintainability   - Clear separation of concerns
✓ Extensibility     - Add new generators by implementing interface
✓ Independence      - Domain layer has no external dependencies
